.. include:: <s5defs.txt>

.. footer:: conf.kde.in - March 2011

.. role:: vcenter

Start KoDEing
=============

.. class:: center

Nikhil Marathe

Outline
-------

* The KDE SC modules
* How we we work
* Setting up a development environment
* Your first bug fix
* Tips and tricks

Junior Jobs
-----------

* All Junior Jobs http://is.gd/ftk7l
* Pick one which interests you
* Dig through the code
* Aim for minimum changes

Layout
------

.. class:: incremental

* Qt
* Phonon + backend
* Support
* KDE Platform
* Other modules
* Extragear
* Playground

Development cycle
-----------------

* Find a bug/feature
* Pull latest code
* Make changes
* Submit a review request
* Get somebody to commit

We use git
----------

except a bit of subversion
~~~~~~~~~~~~~~~~~~~~~~~~~~

* So run `git|svn diff` to get changed code for review

Code Review
----------------

* Submit to [git.]reviewboard.kde.org
* Any major code, especially features
* Even if you are a core developer of the project.

Release Schedule
----------------

* 6 month release schedule
* Although sub projects might have different Cycles
    * Amarok has a shorter 6 week cycle
* Understand *string freeze*, *feature freeze*
* You don't need to know all of this at once

Setting up a development environment
------------------------------------

A little investment for the first time.

* Quite a number of packages, but very repetitive and just 1 command each
* Useful: http://techbase.kde.org/Getting_Started/Build/KDE4/Prerequisites
* The build is almost never broken. It's your fault.

Setting up a development environment
------------------------------------

* Grab this shell script (from now on called ``kdebashrc``)
    * http://codepad.org/rB1qtOot
* Understand it
* ``mkdir -p ~/kdedev/{src,build,install}``
* ``source kdebashrc && cs``

Phonon
-------------

* `git://anongit.kde.org/phonon`
* ``cd phonon && cmakekde && cd ..``
* `git://anongit.kde.org/phonon-vlc`
* rinse and repeat

Prerequisites
-------------

* Get and build DbusMenu
    * google dbusmenu 0.6.0 rpm
    * `git://gitorious.org/dbusmenu/dbusmenu-qt.git <git://gitorious.org/dbusmenu/dbusmenu-qt.git>`_
    * ``cmakekde``

Compile
-------

* Now grab and compile trunk
    * kdesupport
    * KDE/kdelibs
    * KDE/kdebase

Run
---

* Console login
* Edit .xinitrc::

    source kdebashrc
    ck-launch-session startkde

* ``$ xinit``

Watch out
---------

* Use version compatible APIs
* If X has Qt 4.5 as a requirement:
    * you can't use a function introduced in Qt 4.7

Your first bug fix
------------------

Tips and tricks
---------------

* Before you begin get a good conceptual grasp of the code.
    * This means you HAVE TO READ! Everything!
        * Yes, seriously!
* When in doubt:
    * `git blame`
    * Try experimenting
    * Contact maintainer/project mailing list
* Code fearlessly
* Follow the file coding style!

Code reading
------------

* Use an editor supporting jumps
* In `vi(m)` use `*`, `Ctrl+O` and `Ctrl+I`
* `ack` finds everything - http://betterthangrep.com
* Identify common patterns

Code writing
------------

* always try and assert your `QObject::connect()`
* Signals and slots require fully qualified names
* Liberally sprinkle `Q_ASSERT()` while coding
    * but remember, assertions are not a replacement for error handling

Common mistakes
---------------

* Did you source your kdebashrc?
* Did you add your source file to CMakeLists.txt?
* Did you assert your connections?
* Is your code being executed?

Debugging
---------

* kdebugdialog and kdeinit4
* kDebug() and friends.

Finally...
----------

    | May your base cases always be defined,
    | May your code always elude perplexity,
    | May your run times always be confined
    | to the lowest asymptotic complexity.

.. class:: center

Thank You
~~~~~~~~~
